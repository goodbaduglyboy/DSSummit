{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNp0Jaisp2atCoy5pR4fiaZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/goodbaduglyboy/DSSummit/blob/master/8_Queens_Challenge\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FnLTR0xM1Z4K",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "63e820ed-e0e0-45c3-bea4-75cd0b8ea1f6"
      },
      "source": [
        "import random\n",
        "import sys\n",
        "\n",
        "global n,maxFitness,pop_size\n",
        "\n",
        "#Function to generate initial population\n",
        "def populate():\n",
        "  pop_list=[]\n",
        "  n=8\n",
        "  maxFitness = (n*(n-1))/2 \n",
        "  pop_size= 100\n",
        "  for i in range(pop_size):\n",
        "    population = random.sample(range(0,n), n)\n",
        "    pop_list.append(population)\n",
        "  # print(pop_list)\n",
        "  return pop_list\n",
        "\n",
        "#Function to select randomly from population\n",
        "def rand_select(pop_list):\n",
        "  selected_element = random.choice(pop_list)\n",
        "  fitscore = calc_fitness(selected_element)\n",
        "  return(selected_element,fitscore)\n",
        "\n",
        "#Function to reproduce two randomly selected chromosomes\n",
        "def reproduce(x,y):\n",
        "  n = len(x)\n",
        "  c = random.randint(0, n - 1)\n",
        "  child= x[0:c] + y[c:n]\n",
        "  # print(child)\n",
        "  return child\n",
        "\n",
        "#Function to mutate a child\n",
        "def mutate(child):  \n",
        "  n = len(child)\n",
        "  c = random.randint(0, n - 1)\n",
        "  m = random.randint(1, n-1)\n",
        "  child[c] = m\n",
        "  mutated_child= child\n",
        "  return mutated_child\n",
        "  # print('mutated-',child)\n",
        "\n",
        "#Function to calculate Fitness\n",
        "def calc_fitness(chrome):\n",
        "  horizontal_collisions = sum([chrome.count(queen)-1 for queen in chrome])/2\n",
        "  # print(chrome,[chrome.count(queen)-1 for queen in chrome],horizontal_collisions)\n",
        "  diagonal_collisions = 0\n",
        "\n",
        "  n = len(chrome)\n",
        "  left_diagonal = [0] * 2*n\n",
        "  right_diagonal = [0] * 2*n\n",
        "  for i in range(n):\n",
        "      left_diagonal[i + chrome[i] - 1] += 1\n",
        "      right_diagonal[len(chrome) - i + chrome[i] - 2] += 1\n",
        "  diagonal_collisions = 0\n",
        "  for i in range(2*n-1):\n",
        "      counter = 0\n",
        "      if left_diagonal[i] > 1:\n",
        "          counter += left_diagonal[i]-1\n",
        "      if right_diagonal[i] > 1:\n",
        "          counter += right_diagonal[i]-1\n",
        "      diagonal_collisions += counter / (n-abs(i-n+1))\n",
        "  fit= maxFitness - (horizontal_collisions + diagonal_collisions)\n",
        "  return(fit)\n",
        "\n",
        "#Genetic Algorithm function\n",
        "def genetic_queen(pop_list):\n",
        "  new_population = []\n",
        "\n",
        "  for i in range(0,pop_size):\n",
        "    x,fitx = rand_select(pop_list)\n",
        "    y,fity = rand_select(pop_list)\n",
        "\n",
        "    child = reproduce(x,y) #Reproduction is done here\n",
        "    mutated_child = mutate(child) #Mutation is done here\n",
        "    new_population.append(mutated_child)\n",
        "    mut_fitness = calc_fitness(mutated_child)\n",
        "    if  mut_fitness == maxFitness: \n",
        "      # print(mutated_child,mut_fitness,maxFitness)\n",
        "      nofitfound= False\n",
        "      break\n",
        "    else:\n",
        "      nofitfound = True\n",
        "    \n",
        "  return(new_population,nofitfound)\n",
        "  \n",
        "#Main Function\n",
        "if __name__ == \"__main__\":\n",
        "  pop_list=populate()\n",
        "  nofitfound =  False\n",
        "  new_population,nofitfound=genetic_queen(pop_list)\n",
        "  # print(nofitfound)\n",
        "  while nofitfound == True:\n",
        "    new_population,nofitfound=genetic_queen(pop_list)\n",
        "  for chrom in new_population:\n",
        "    fit=calc_fitness(chrom)\n",
        "    if fit==maxFitness:\n",
        "      print('Selected Chromosome-',chrom,'\\nFitness-',fit)\n",
        "      break\n",
        "\n",
        "  \n",
        "\n",
        "  \n",
        "\n",
        "  \n",
        "  \n",
        "  \n",
        "  \n",
        "\n",
        "\n",
        "\n",
        "    \n",
        "\n",
        "\n"
      ],
      "execution_count": 285,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Selected Chromosome- [2, 5, 7, 1, 3, 0, 6, 4] \n",
            "Fitness- 28.0\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}